mkdir $1;
cd $1;
echo " This is the $1" > readme.txt;
echo " 
__pycache__
.vscode
venv/
dbcreds.py" > .gitignore;
echo "
user = 'root'
password = 'Sandhu772'
host = 'localhost'
port = 3306
database = '$1'
production_mode = False " > dbcreds.py;
echo "
# import mariadb
import mariadb
# import db creds file
import dbcreds

# connect db will connect to the database using dbcreds and return the cursor
# if there is an error in connecting it will try to find out the error 
# and print the error and return the error
def connect_db():
    try:
        conn = mariadb.connect(user=dbcreds.user, host= dbcreds.host, password=dbcreds.password, port=dbcreds.port, database=dbcreds.database)
        cursor = conn.cursor
        return cursor()
    except mariadb.OperationalError as error:
        print('Operational Error: ',error)
        return str(error)
    except mariadb.ProgrammingError as error:
        print('Programming Error: ',error)
        return str(error)
    except AttributeError as error:
        print('Attribute Error:',error)
        return str(error)
    except NameError as error:
        print('Name Error:',error)
        return str(error)
    except Exception as error:
        print('Unknown Error: ', error)
        return str(error)
    
# execute statment will use the cursor and 2 other arguments 
# after running the statement it will store the result into result variable and return it
# if there is any error it will find out the error
# and print out the name of error and information about the error
def execute_statement(cursor,statement,list=[]):
    try:
        cursor.execute(statement,list)
        result = cursor.fetchall()
        return result
    except mariadb.IntegrityError as error:
        print('Integrity Error: ',error)
        return str(error)
    except mariadb.ProgrammingError as error:
        print('Programming Error: ',error)
        return str(error)
    except TypeError as error:
        print('Type Error: ',error)
        return str(error)
    except Exception as error:
        print('Unknown Error:',error)
        return str(error)

# close connection will use the cursor to close the connection
# if failed then try to print the error with appropriate message and information about the error
def close_connection(cursor):
    try:
        conn = cursor.connection
        cursor.close()
        conn.close()
    except AttributeError as error:
        print('Attribute Error', error)
        return str(error)
    except Exception as error:
        print('Unknown Error: ',error)
        return str(error)

# conn_exe_close will use the connect_db(),
# execute_statment() and close_connection()
# will shrink the code to one line when needed to run a stored procedure from a database
def conn_exe_close(statement,list):
    cursor = connect_db()
    if(cursor == None):
        return 'Connection Error'
    result = execute_statement(cursor,statement,list)
    close_connection(cursor)
    return result
" > dbhelpers.py;

echo "
# import single function from dbhelpers to connect
# execute and close the connection
from dbhelpers import conn_exe_close
# import request, make_response,jsonify from flask
from flask import make_response
import json

# single function to handle database interactions
# and based on results will send errors
def get_display_results(statement,args_list):
    results = conn_exe_close(statement,args_list)
    if(type(results) == list):
        if(len(results) == 0):
            return 'No Results matched your input'
        return results
    elif(type(results) == str):
        if(results.startswith('Duplicate entry')):
            return 'Duplicate data already exists, please change values and try again'
        return make_response(json.dumps(results, default=str), 400)
    else:
        return make_response(json.dumps(results, default=str) , 500)

# will verifiy end points arguments for presence
# if necessary arguments not sent then remind the user to send
def verify_endpoints_info(sent_data,required_args):
    for data in required_args:
        if(sent_data.get(data) == None):
            return f'The {data} argument is required'" > apihelpers.py;

echo "
from dbhelpers import conn_exe_close
from apihelpers import get_display_results, verify_endpoints_info
from flask import Flask, request, make_response
import json
import dbcreds

app = Flask(__name__)

if(dbcreds.production_mode == True):
    print('Running in PRODUCTION MODE')
    app.run(debug=True)
else:
    from flask_cors import CORS
    CORS(app)
    print('Running in TESTING MODE')
    app.run(debug=True)

" > app.py;

python3 -m venv venv;
source venv/bin/activate;
pip install mariadb flask flask-cors;
pip freeze > requirements.txt
git init;
git add -A;
git commit -m"started the project $1";
git remote add origin https://github.com/satindersingh472/$1.git
git branch -M main
git push -u origin main
